<project basedir=".">
    <!--
    IMPORTANT: This file is private and should not be edited.
    -->
    <import file="${cmd.config.dir}/plugin.xml"/>

    <target name="init-properties"
            depends="cmd-root-plugin.init-properties">
        <!--init the defualt app path here-->
        <property name="args.path" location="${basedir}/../../"/>
        <property name="templates.dir"
                  location="${framework.config.dir}/templates"/>
    </target>

    <!--
        Copies select files from the base sdk directory into the  new application
        directory structure
    -->
    <target name="copy-framework-to-workspace-impl"
            depends="cmd-root-plugin.copy-framework-to-workspace-impl">
        <property name="framework.target.dir" location="${framework.path}"/>
        <copy todir="${framework.target.dir}">
            <fileset dir="${framework.dir}"
                     includes="src/**/*,
                               microloader/**/*,
                               resources/**/*,
                               cmd/**/*,
                               version.txt,
                               sencha-touch-debug.js,
                               sencha-touch-all-debug.js,
                               build.xml,
                               file-header.txt,
                               license.txt"/>
        </copy>

        <copy file="${framework.target.dir}/sencha-touch-debug.js"
              tofile="${framework.target.dir}/sencha-touch.js"/>
        <copy file="${framework.target.dir}/sencha-touch-all-debug.js"
              tofile="${framework.target.dir}/sencha-touch-all.js"/>

        <propertyfile file="${args.path}/${senchadir}/workspace/sencha.cfg">
            <!--apply new defaults if unset-->
            <entry type="string" 
                   operation="="
                   key="workspace.packages.dir" 
                   default="$${workspace.dir}/packages"/>
            
            <!--update existing values-->
            <entry type="string"
                   operation="="
                   key="${framework.name}.dir" 
                   value="$${workspace.dir}/${framework.relative.path}"/>
            <entry type="string"
                   operation="="
                   key="workspace.cmd.version" 
                   value="${cmd.version}"/>
        </propertyfile>
    </target>

    <target name="copy-sdk">
        <copy file="${framework.dir}/resources/css-debug/sencha-touch.css"
              tofile="${args.path}/resources/css/app.css"/>
    </target>

    <target name="generate-starter-app">
        <property name="templates.app.starter.dir" value="${templates.dir}/StarterApp"/>

        <x-generate dir="${templates.app.starter.dir}" 
                    todir="${args.path}"
                    store="${args.path}/${senchadir}/app/codegen.json">
            <param name="name" value="${args.name}"/>
            <param name="appName" value="${args.name}"/>
            <param name="library" value="${args.library}"/>
            <param name="uniqueId" value="${app.id}"/>
            <param name="frameworkName" value="${framework.name}"/>
            <param name="frameworkPath" value="${framework.path}"/>
            <param name="senchadir" value="${senchadir}"/>
            <!-- placeholders for mvc structures -->
            <param name="appModels" value=""/>
            <param name="appViews" value=""/>
            <param name="appControllers" value=""/>
            <param name="appStores" value=""/>
        </x-generate>

        <mkdir dir="${args.path}/app"/>
        <mkdir dir="${args.path}/app/model"/>
        <mkdir dir="${args.path}/app/view"/>
        <mkdir dir="${args.path}/app/controller"/>
        <mkdir dir="${args.path}/app/store"/>
        <mkdir dir="${args.path}/app/profile"/>
        <mkdir dir="${framework.dir}/resources"/>
        <mkdir dir="${framework.dir}/resources/css"/>
        <mkdir dir="${framework.dir}/resources/images"/>
        <mkdir dir="${framework.dir}/resources/icons"/>
        <mkdir dir="${framework.dir}/resources/sass"/>
    </target>

    <!--
        Generates an application structure from templates
        CLI args available as:
        args.name => the application name
        args.path => the target path of the new application
    -->
    <target name="generate-app-impl">
        <x-load-json-properties file="${args.path}/app.json" prefix="app.json"/>
        <x-guid property="app.json.id"/>
        <property name="app.id" value="${app.json.id}"/>

        <property name="app.cmd.version" value="3.0.0.250"/>
        <property name="legacy.template.path" 
                  value="${cmd.config.dir}/legacy/${app.cmd.version}/touch/current/templates"/>
                
        <if>
            <isset property="args.upgrade"/>
            <then>
                <propertyfile file="${workspace.config.dir}/sencha.cfg">
                    <entry type="string"
                           operation="="
                           key="workspace.build.dir" 
                           value="$${workspace.dir}/build"/>
                </propertyfile>
            </then>
            <else>
                <antcall target="generate-starter-app"/>
                <antcall target="copy-sdk"/>
            </else>
        </if>

        <x-generate dir="${templates.dir}/App" 
                    todir="${args.path}"
                    store="${args.path}/${senchadir}/app/codegen.json"
                    original="${legacy.template.path}/App">
            <param name="name" value="${args.name}"/>
            <param name="appName" value="${args.name}"/>
            <param name="library" value="${args.library}"/>
            <param name="uniqueId" value="${app.id}"/>
            <param name="frameworkName" value="${framework.name}"/>
            <param name="frameworkPath" value="${framework.path}"/>
            <param name="senchadir" value="${senchadir}"/>
            <!-- placeholders for mvc structures -->
            <param name="appModels" value=""/>
            <param name="appViews" value=""/>
            <param name="appControllers" value=""/>
            <param name="appStores" value=""/>
        </x-generate>

        <propertyfile file="${args.path}/.sencha/app/sencha.cfg">
            <!--apply defaults if not present-->
            <entry type="string" key="app.build.dir" operation="="
                   default="$${workspace.build.dir}/$${app.name}"/>
              
            <!--set new values-->
            <entry type="string" key="app.cmd.version" operation="="
                   value="${cmd.version}"/>
            <entry type="string" key="app.id" operation="="
                   value="${app.id}"/>
        </propertyfile>

        <x-app-update tplpath="${templates.dir}/App"
                      appjspath="app.js"
                      appdir="${args.path}"
                      appname="${args.name}"
                      legacypath="${legacy.template.path}/App"/>

    </target>

    <!--
        Adds a new theme template application
        args.name => the theme name
        args.cssPath => the path to the css file
    -->
    <target name="generate-theme-impl">
        <fail>Generate Theme is an ExtJS SDK specific command.</fail>
    </target>

    <!--
        Adds a controller class to the application
        CLI args available as:
        args.name => the application name
        args.path => the target path of the new application
    -->
    <target name="generate-controller-impl">
        <x-generate dir="${templates.dir}/Controller" todir="${args.path}/app/controller"
                    store="${args.path}/${senchadir}/app/codegen.json"
                    basedir="${args.path}">
            <param name="appName" value="${app.name}"/>
            <param name="name" value="${args.name}"/>
            <param name="controllerName" value="${args.name}"/>
            <param name="controllerFileName" value="${args.filename}"/>
        </x-generate>
        <x-app-update tplpath="${templates.dir}/App"
                      appjspath="app.js"
                      appdir="${args.path}"
                      appname="${app.name}"/>
    </target>

    <!--
        Adds a profile class to the application
        CLI args available as:
        args.name => the application name
        args.path => the target path of the new application
    -->
    <target name="generate-profile-impl">
        <x-generate dir="${templates.dir}/Profile" todir="${args.path}/app/profile"
                    store="${args.path}/${senchadir}/app/codegen.json"
                    basedir="${args.path}">
            <param name="appName" value="${app.name}"/>
            <param name="name" value="${args.name}"/>
            <param name="profileName" value="${args.name}"/>
            <param name="profileFileName" value="${args.filename}"/>
        </x-generate>
        <x-app-update tplpath="${templates.dir}/App"
                      appjspath="app.js"
                      appdir="${args.path}"
                      appname="${app.name}"/>
    </target>

    <!--
        Adds a model class to the application
        CLI args available as:
        args.name => the model name
        args.path => the target path of the application
        args.fields => the field definitions to add
        -fields=name:val,other:otherval,...
    -->
    <target name="generate-model-impl">
        <x-generate dir="${templates.dir}/Model" todir="${args.path}/app/model"
                    store="${args.path}/${senchadir}/app/codegen.json"
                    basedir="${args.path}">
            <param name="appName" value="${app.name}"/>
            <param name="name" value="${args.name}"/>
            <param name="modelFileName" value="${args.filename}"/>
            <param name="fields" value="${args.fields}"/>
        </x-generate>
        <x-app-update tplpath="${templates.dir}/App"
                      appjspath="app.js"
                      appdir="${args.path}"
                      appname="${app.name}"/>
    </target>

    <!--
        Adds a form class to the application
        CLI args available as:
        args.name => the form name
        args.path => the target path of the application
        args.fields => the field definitions to add
        -fields=name:val,other:otherval,...
    -->
    <target name="generate-form-impl">
        <x-generate dir="${templates.dir}/Form" todir="${args.path}/app/view"
                    store="${args.path}/${senchadir}/app/codegen.json"
                    basedir="${args.path}">
            <param name="appName" value="${app.name}"/>
            <param name="name" value="${args.name}"/>
            <param name="formFileName" value="${args.filename}"/>
            <param name="fields" value="${args.fields}"/>
            <param name="xtype" value="${args.xtype}"/>
        </x-generate>
        <x-app-update tplpath="${templates.dir}/App"
                      appjspath="app.js"
                      appdir="${args.path}"
                      appname="${app.name}"/>
    </target>

    <!--
        Adds a model class to the application
        CLI args available as:
        args.name => the model name
        args.path => the target path of the application
        args.fields => the field definitions to add
        -fields=name:val,other:otherval,...
    -->
    <target name="generate-view-impl">
        <fail>Generate View is an ExtJS SDK specific command.</fail>
    </target>

    <target name="app-upgrade-impl">

        <x-script-def name="x-app-upgrade" 
                      src="${framework.config.dir}/app-upgrade.js">
            <script src="${cmd.config.dir}/ant/JSON.js"/>
            <script src="${cmd.config.dir}/ant/ant-util.js"/>
        </x-script-def>
        <x-app-upgrade/>
        
        <x-app-update tplpath="${templates.dir}/App"
          appjspath="app.js"
          appdir="${app.dir}"
          appname="${app.name}"/>

    </target>

    <target name="app-resolve-impl">
        <script language="javascript">
            importPackage(java.io);
            importPackage(com.sencha.util);
            importPackage(com.sencha.logging);
            importPackage(com.sencha.tools.external);

            var _logger = SenchaLogManager.getLogger('app-resolve'),
                runner = new PhantomJsRunner(),
                args = [
                    PathUtil.join(project.getProperty("basedir"), "dependencies.js"),
                    project.getProperty("args.uri")
                ],
                runnerOut = runner.run(args),
                exitCode = runnerOut.getExitCode(),
                stdout = runnerOut.getOutput();

            if(exitCode > 0) {
                _logger.error("Failed capturing Dependencies");
                _logger.error(stdout);
                throw 'Failed capturing dependencies';
            }

            FileUtil.writeFile(project.getProperty("args.output"), stdout);

        </script>
    </target>

</project>