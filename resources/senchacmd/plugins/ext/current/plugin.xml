<project name="ext-42-plugin" basedir=".">
    <!--
    IMPORTANT: This file is private and should not be edited.
    -->
    <import file="${cmd.config.dir}/plugin.xml"/>

    <target name="init-properties" 
            depends="cmd-root-plugin.init-properties">
        <!--init the defualt app path here-->
        <property name="args.path" location="${basedir}/../../"/>
        <property name="templates.dir"
                  location="${framework.config.dir}/templates"/>
    </target>

    <!--
        Copies select files from the base sdk directory into the  new application
        directory structure
    -->
    <target name="copy-framework-to-workspace-impl"
            depends="cmd-root-plugin.copy-framework-to-workspace-impl">
        <property name="framework.target.dir" location="${framework.path}"/>
        <copy todir="${framework.target.dir}" overwrite="true">
            <fileset dir="${framework.dir}"
                     includes="src/**/*,
                               builds/**/*,
                               cmd/**/*,
                               locale/**/*,
                               *.js,
                               build.xml,
                               license.txt"/>
        </copy>

        <copy todir="${framework.target.dir}/src/ux" overwrite="true">
            <fileset dir="${framework.dir}/examples/ux"
                     includes="**/*"/>
        </copy>

        <copy todir="${framework.target.dir}/../packages" overwrite="true">
            <fileset dir="${framework.dir}/packages"
                     includes="**/*"/>
        </copy>

        <propertyfile file="${args.path}/${senchadir}/workspace/sencha.cfg">
            <!--apply new defaults if unset-->
            <entry type="string" 
                   operation="="
                   key="workspace.packages.dir" 
                   default="$${workspace.dir}/packages"/>
            
            <!--update existing values-->
            <entry type="string" 
                   operation="="
                   key="${framework.name}.dir" 
                   value="$${workspace.dir}/${framework.relative.path}"/>
            <entry type="string"
                   operation="="
                   key="workspace.cmd.version" 
                   value="${cmd.version}"/>
        </propertyfile>
    </target>

    <target name="generate-starter-app">
        <property name="templates.app.starter.dir" value="${templates.dir}/StarterApp"/>

        <x-generate dir="${templates.app.starter.dir}" 
                    todir="${args.path}"
                    store="${args.path}/${senchadir}/app/codegen.json"
                    basedir="${args.path}">
            <param name="name" value="${args.name}"/>
            <param name="appName" value="${args.name}"/>
            <param name="library" value="all"/>
            <!-- These are needed for the theme template-->
            <param name="themeName" value="${args.themeName}"/>
            <param name="controllerName" value="${args.controllerName}"/>
            <param name="controllerFileName" value="${args.controllerName}"/>
            <param name="viewName" value="${args.viewName}"/>
            <param name="viewFileName" value="${args.viewName}"/>
            <param name="frameworkName" value="${framework.name}"/>
            <param name="frameworkPath" value="${framework.path}"/>
            <param name="packagesRelPath" value="${packages.extract.path}"/>
            <param name="senchadir" value="${senchadir}"/>
            <param name="uniqueId" value="${app.id}"/>
            <!-- placeholders for mvc structures -->
            <param name="appModels" value=""/>
            <param name="appViews" value=""/>
            <param name="appControllers" value=""/>
            <param name="appStores" value=""/>
        </x-generate>

        <mkdir dir="${args.path}/app/model"/>
        <mkdir dir="${args.path}/app/store"/>
        <mkdir dir="${args.path}/resources"/>
        <mkdir dir="${args.path}/overrides"/>
        <mkdir dir="${args.path}/sass"/>
        <mkdir dir="${args.path}/sass/src"/>
        <mkdir dir="${args.path}/sass/var"/>
        <mkdir dir="${args.path}/sass/etc"/>
    </target>

    <!--
        Generates an application structure from templates
        CLI args available as:
        args.name => the application name
        args.path => the target path of the new application
    -->
    <target name="generate-app-impl">
        <x-load-json-properties file="${args.path}/app.json" prefix="app.json"/>
        <x-guid property="app.json.id"/>
        <property name="app.id" value="${app.json.id}"/>

        <!--default these from args if new app-->
        <property name="app.dir" value="${args.path}"/>
        <property name="app.name" value="${args.name}"/>

        <property name="app.cmd.version" value="3.0.0.250"/>
        <property name="legacy.template.path" 
                  value="${cmd.config.dir}/legacy/${app.cmd.version}/ext/current/templates"/>
        
        <x-get-relative-path from="${framework.dir}" to="${args.path}"
                             property="framework.path"/>
        
        <x-get-relative-path from="${workspace.packages.dir}" to="${args.path}"
                             property="packages.extract.path"/>
        
        <x-generate dir="${templates.dir}/App" 
                    todir="${args.path}"
                    store="${args.path}/${senchadir}/app/codegen.json"
                    basedir="${args.path}"
                    original="${legacy.template.path}/App">
            <param name="name" value="${args.name}"/>
            <param name="appName" value="${args.name}"/>
            <param name="library" value="all"/>
            <!-- These are needed for the theme template-->
            <param name="themeName" value="${args.themeName}"/>
            <param name="controllerName" value="${args.controllerName}"/>
            <param name="controllerFileName" value="${args.controllerName}"/>
            <param name="viewName" value="${args.viewName}"/>
            <param name="viewFileName" value="${args.viewName}"/>
            <param name="frameworkName" value="${framework.name}"/>
            <param name="frameworkPath" value="${framework.path}"/>
            <param name="packagesRelPath" value="${packages.extract.path}"/>
            <param name="senchadir" value="${senchadir}"/>
            <param name="uniqueId" value="${app.id}"/>
            <!-- placeholders for mvc structures -->
            <param name="appModels" value=""/>
            <param name="appViews" value=""/>
            <param name="appControllers" value=""/>
            <param name="appStores" value=""/>
        </x-generate>
        
        <if>
            <isset property="args.upgrade"/>
            <then>
                <echo>Upgrade</echo>
                <propertyfile file="${workspace.config.dir}/sencha.cfg">
                    <entry type="string"
                           operation="="
                           key="workspace.build.dir" 
                           value="$${workspace.dir}/build"/>
                </propertyfile>
            </then>
            <else>
                <antcall target="generate-starter-app"/>
            </else>
        </if>
               
        <x-app-update 
            tplpath="${templates.dir}/App"
            appjspath="app/app.js"
            appdir="${app.dir}"
            appname="${app.name}"
            legacypath="${legacy.template.path}/App"/>

        <propertyfile file="${args.path}/.sencha/app/sencha.cfg">
            <!--apply defaults if not present-->
            <entry type="string" key="app.build.dir" operation="="
                   default="$${workspace.build.dir}/$${app.name}"/>
            <entry type="string" key="app.sass.namespace" operation="="
                   default="$${app.name}"/>
            <entry type="string" key="app.sass.etcpath" operation="="
                   default="$${app.dir}/sass/etc/all.scss"/>
            <entry type="string" key="app.sass.varpath" operation="="
                   default="$${app.dir}/sass/src/var"/>
            <entry type="string" key="app.sass.srcpath" operation="="
                   default="$${app.dir}/sass/src"/>
            <entry type="string" key="app.theme" operation="="
                   default="ext-theme-classic"/>
              
            <!--set new values-->
            <entry type="string" key="app.cmd.version" operation="="
                   value="${cmd.version}"/>
            <entry type="string" key="app.id" operation="="
                   value="${app.id}"/>
        </propertyfile>

        <if>
            <isset property="merge.conflicts"/>
            <then>
                <fail>Upgrade encountered ${merge.conflicts} merge conflicts. Please resolve all merge conflicts then run 'sencha app refresh'.</fail>
            </then>
            <else>
                <x-sencha-command dir="${args.path}" inheritAll="false">
                    app
                        refresh
                </x-sencha-command>
            </else>
        </if>
    </target>

    <!--
        Adds a new theme template application
        args.name => the theme name
        args.cssPath => the path to the css file
    -->
    <target name="generate-theme-impl">
        <local name="new.package.dir"/>
        <property name="new.package.dir" 
                  location="${workspace.packages.dir}/${args.name}"/>

        <x-sencha-command dir="${workspace.packages.dir}" inheritAll="false">
            generate
                package
                    --type=theme
                    --name=${args.name}
        </x-sencha-command>
        
        
        <!--update the theme's package.json to derive from the supplied base-->
        <property name="theme.extend.name" value="ext-theme-classic"/>
        <x-script-def name="x-update-theme-extend">
            <attribute name="jsonfile"/>
            <attribute name="basetheme"/>
            <script src="${cmd.config.dir}/ant/JSON.js"/>
            <script src="${cmd.config.dir}/ant/ant-util.js"/>
            <![CDATA[
                var jsonFile = attributes.get("jsonfile"),
                    base = attributes.get("basetheme") + '',
                    config = readJson(jsonFile);
                config.extend = base;
                writeJson(jsonFile, config);
            ]]>
        </x-script-def>

        <x-update-theme-extend jsonfile="${new.package.dir}/package.json"
                               basetheme="${theme.extend.name}"/>
        
        <!--set the package.framework property to link up with ext-->
        <propertyfile file="${new.package.dir}/${senchadir}/package/sencha.cfg">
            <entry type="string" key="package.framework" operation="="
                   value="ext"/>
        </propertyfile>
    </target>

    <!--
        Adds a controller class to the application
        CLI args available as:
        args.name => the application name
        args.path => the target path of the new application
    -->
    <target name="generate-controller-impl">
        <x-generate dir="${templates.dir}/StarterApp/app/controller"
                    todir="${args.path}/app/controller"
                    store="${args.path}/${senchadir}/app/codegen.json"
                    basedir="${args.path}">
            <param name="appName" value="${app.name}"/>
            <param name="name" value="${args.name}"/>
            <param name="controllerName" value="${args.name}"/>
            <param name="controllerFileName" value="${args.filename}"/>
        </x-generate>
        <x-app-update tplpath="${templates.dir}/App"
                      appjspath="app/app.js"
                      appdir="${args.path}"
                      appname="${app.name}"/>
    </target>

    <!--
        Adds a profile class to the application
        CLI args available as:
        args.name => the application name
        args.path => the target path of the new application
    -->
    <target name="generate-profile-impl">
        <fail>Generate Profile is a Touch SDK specific command.</fail>
    </target>

    <!--
        Adds a model class to the application
        CLI args available as:
        args.name => the model name
        args.path => the target path of the application
        args.fields => the field definitions to add
        -fields=name:val,other:otherval,...
    -->
    <target name="generate-model-impl">
        <property name="section" value="model"/>

        <x-generate dir="${templates.dir}/Model" todir="${args.path}/app/model"
                    store="${args.path}/${senchadir}/app/codegen.json"
                    basedir="${args.path}">
            <param name="appName" value="${app.name}"/>
            <param name="baseClass" value="${args.base}"/>
            <param name="name" value="${args.name}"/>
            <param name="modelFileName" value="${args.filename}"/>
            <param name="fields" value="${args.fields}"/>
        </x-generate>
        <x-app-update tplpath="${templates.dir}/App"
                      appjspath="app/app.js"
                      appdir="${args.path}"
                      appname="${app.name}"/>
    </target>

    <!--
        Adds a model class to the application
        CLI args available as:
        args.name => the model name
        args.path => the target path of the application
        args.fields => the field definitions to add
        -fields=name:val,other:otherval,...
    -->
    <target name="generate-view-impl">
        <property name="section" value="model"/>

        <x-generate dir="${templates.dir}/StarterApp/app/view" todir="${args.path}/app/view"
                    store="${args.path}/${senchadir}/app/codegen.json"
                    basedir="${args.path}">
            <param name="appName" value="${app.name}"/>
            <param name="name" value="${args.name}"/>
            <param name="viewName" value="${args.name}"/>
            <param name="viewFileName" value="${args.filename}"/>
        </x-generate>
        <x-app-update tplpath="${templates.dir}/App"
                      appjspath="app/app.js"
                      appdir="${args.path}"
                      appname="${app.name}"/>
    </target>

    <target name="app-refresh-impl">
<echo file="${args.metadatafile}">
/**
 * This file is generated by Sencha Cmd and should NOT be edited.  It is 
 * provided to support globbing requires, custom xtypes, and other 
 * metadata-driven class system features 
 */
</echo>
        <x-sencha-command>
            compile
                exclude
                    -tag=core
                and
                metadata
                    +append
                    --base-path=${args.basepath}
                    +loader-paths
                    -jsonp=Ext.Loader.addClassPathMappings
                    -out=${args.metadatafile}
                and
                exclude
                    -tag=framework
                and
                include
                    -namespace=Ext.ux
                and
                metadata
                    --base-path=${args.basepath}
                    +alternates
                    +append
                    -out=${args.metadatafile}
                and
                metadata
                    --base-path=${args.basepath}
                    +alias
                    +append
                    -out=${args.metadatafile}
                and
                union
                    -tag=packageOverrides
                and
                metadata
                    --base-path=${args.basepath}
                    +append
                    +filenames
                    -tpl=Ext.Loader.loadScript("{0}");
                    -out=${args.metadatafile}
                    
        </x-sencha-command>
    </target>

    <target name="app-upgrade-impl">
        <if>
            <not>
                <isset property="${workspace.packages.dir}"/>
            </not>
            <then>
                <property name="workspace.packages.dir" 
                          value="${workspace.dir}/packages"/>
                <propertyfile file="${workspace.config.dir}/sencha.cfg">
                    <entry key=""
                           operation="="
                           value="$${workspace.dir}/packages"
                           type="string"/>
                </propertyfile>
            </then>
        </if>

        <x-script-def name="x-app-upgrade" 
                      src="${framework.config.dir}/app-upgrade.js">
            <script src="${cmd.config.dir}/ant/JSON.js"/>
            <script src="${cmd.config.dir}/ant/ant-util.js"/>
        </x-script-def>
        <x-app-upgrade/>
        
        <x-app-update tplpath="${templates.dir}/App"
              appjspath="app/app.js"
              appdir="${app.dir}"
              appname="${app.name}"/>
    </target>

</project>